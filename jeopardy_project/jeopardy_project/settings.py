"""
Django settings for jeopardy_project project.

Generated by 'django-admin startproject' using Django 1.9.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '^1j&tx0do4ox2k=eu5s$p^&d9%((=lx5(06o+mkvtbz7^8&u=y'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'game',
    'pipeline',
    'rest_framework'
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'jeopardy_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'jeopardy_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'jeopardy',
        'USER': os.environ.get('DJANGO_USER', ''),
        'PASSWORD': os.environ.get('DJANGO_PASSWORD', ''),
        'HOST': 'localhost',
        'PORT': '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

# collect static --> takes everything in static dirs and moves it into static path
STATIC_ROOT = os.path.join(BASE_DIR,'static')

STATIC_URL = '/static/'

# like finding templates
STATICFILES_DIRS = ()

# Django Pipeline setup
STATICFILES_STORAGE = 'pipeline.storage.PipelineCachedStorage'
STATICFILES_FINDERS = ('django.contrib.staticfiles.finders.FileSystemFinder',
                        'django.contrib.staticfiles.finders.AppDirectoriesFinder',
                        'pipeline.finders.PipelineFinder')

# Configure object how django pipeline works
# add more js files in 'source_filenames' for both bootstrap and js
PIPELINE = {
   'PIPELINE_ENABLED': True,
   'JAVASCRIPT': {
       'mysite_js': {
           'source_filenames': (
               'js/bower_components/jquery/dist/jquery.min.js',
               'js/bower_components/react/JSXTransformer.js',
               'js/bower_components/react/react-with-addons.js',
               'js/app.browserify.js',
           ),
           'output_filename': 'js/mysite_js.js',
       }
   },
   'STYLESHEETS' : {
       'mysite_css': {
           'source_filenames': (
               'css/style.css',
           ),
           'output_filename': 'css/mysite_css.css',
       },
   }
}

# add a key to the dict above
PIPELINE['COMPILERS'] = ('pipeline_browserify.compiler.BrowserifyCompiler',)

if DEBUG:
    PIPELINE['BROWSERIFY_ARGUMENTS'] = '-t bablify'

# no CSS compression
# package - lowercase
PIPELINE['CSS_COMPRESSOR'] = 'pipeline.compressors.NoopCompressor'

PIPELINE['JS_COMPRESSOR'] = 'pipeline.compressors.uglifyjs.UglifyJSCompressor'

